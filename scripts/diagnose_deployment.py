#!/usr/bin/env python3
"""
Script de diagn√≥stico para el despliegue en Railway
Verifica variables de entorno cr√≠ticas y configuraci√≥n del sistema
"""
import os
import sys
from pathlib import Path
import json

def check_critical_variables():
    """Verificar variables de entorno cr√≠ticas"""
    print("üîç Verificando variables de entorno cr√≠ticas...")

    critical_vars = {
        'ENVIRONMENT': 'test|production',
        'DEBUG': 'true|false',
        'LOG_LEVEL': 'DEBUG|INFO|WARNING|ERROR',
        'API_HOST': '0.0.0.0',
        'API_PORT': '8002',
        'STREAMLIT_SERVER_ADDRESS': '0.0.0.0',
        'STREAMLIT_SERVER_PORT': '8501',
        'STREAMLIT_SERVER_HEADLESS': 'true',
        'MLFLOW_TRACKING_URI': 'file:///app/outputs/mlruns',
        'MLFLOW_HOST': '0.0.0.0',
        'MLFLOW_PORT': '5002'
    }

    security_vars = {
        'SECRET_KEY': 'Debe estar configurada',
        'JWT_SECRET_KEY': 'Debe estar configurada'
    }

    issues = []

    # Verificar variables cr√≠ticas
    for var, expected in critical_vars.items():
        value = os.getenv(var)
        if value is None:
            issues.append(f"‚ùå Variable faltante: {var}")
        else:
            print(f"   ‚úÖ {var}: {value}")

    # Verificar variables de seguridad
    for var, expected in security_vars.items():
        value = os.getenv(var)
        if value is None:
            issues.append(f"‚ùå Variable de seguridad faltante: {var}")
        elif len(value) < 10:
            issues.append(f"‚ö†Ô∏è Variable de seguridad muy corta: {var}")
        else:
            print(f"   ‚úÖ {var}: {'*' * len(value)}")

    return issues

def check_file_permissions():
    """Verificar permisos de archivos"""
    print("\nüîê Verificando permisos de archivos...")

    issues = []

    # Verificar archivos cr√≠ticos
    critical_files = [
        'api.py',
        'web_app.py',
        'predictor.py',
        'config.py'
    ]

    for file_path in critical_files:
        if Path(file_path).exists():
            print(f"   ‚úÖ {file_path} existe")
        else:
            issues.append(f"‚ùå Archivo faltante: {file_path}")

    return issues

def check_models_availability():
    """Verificar disponibilidad de modelos"""
    print("\nü§ñ Verificando modelos...")

    issues = []

    models_dir = Path('models')
    if models_dir.exists():
        model_files = list(models_dir.glob('*.joblib'))
        if model_files:
            print(f"   ‚úÖ Modelos encontrados: {len(model_files)}")
            for model_file in model_files[:3]:  # Mostrar primeros 3
                print(f"      - {model_file.name}")
            if len(model_files) > 3:
                print(f"      ... y {len(model_files) - 3} m√°s")
        else:
            issues.append("‚ùå No se encontraron modelos .joblib")
    else:
        issues.append("‚ùå Directorio models/ no existe")

    # Verificar scaler
    scaler_path = models_dir / 'scaler.joblib'
    if scaler_path.exists():
        print("   ‚úÖ Scaler encontrado")
    else:
        issues.append("‚ùå Scaler no encontrado")

    return issues

def check_requirements():
    """Verificar dependencias cr√≠ticas"""
    print("\nüì¶ Verificando dependencias...")

    issues = []

    try:
        import fastapi
        print("   ‚úÖ FastAPI disponible")
    except ImportError:
        issues.append("‚ùå FastAPI no disponible")

    try:
        import streamlit
        print("   ‚úÖ Streamlit disponible")
    except ImportError:
        issues.append("‚ùå Streamlit no disponible")

    try:
        import mlflow
        print("   ‚úÖ MLflow disponible")
    except ImportError:
        issues.append("‚ùå MLflow no disponible")

    try:
        import sklearn
        print("   ‚úÖ Scikit-learn disponible")
    except ImportError:
        issues.append("‚ùå Scikit-learn no disponible")

    return issues

def check_ports_configuration():
    """Verificar configuraci√≥n de puertos"""
    print("\nüîå Verificando configuraci√≥n de puertos...")

    issues = []

    # Verificar que los puertos no est√©n en conflicto
    ports = {
        'API': os.getenv('API_PORT', '8002'),
        'Streamlit': os.getenv('STREAMLIT_SERVER_PORT', '8501'),
        'MLflow': os.getenv('MLFLOW_PORT', '5002')
    }

    port_numbers = []
    for service, port in ports.items():
        try:
            port_num = int(port)
            if port_num in port_numbers:
                issues.append(f"‚ùå Conflicto de puertos: {service} usa puerto {port} (ya usado)")
            else:
                port_numbers.append(port_num)
                print(f"   ‚úÖ {service}: {port}")
        except ValueError:
            issues.append(f"‚ùå Puerto inv√°lido para {service}: {port}")

    return issues

def main():
    """Funci√≥n principal de diagn√≥stico"""
    print("="*70)
    print("üîç DIAGN√ìSTICO DE DESPLIEGUE EN RAILWAY")
    print("="*70)

    all_issues = []

    # Ejecutar todas las verificaciones
    checks = [
        ("Variables de Entorno", check_critical_variables),
        ("Permisos de Archivos", check_file_permissions),
        ("Modelos", check_models_availability),
        ("Dependencias", check_requirements),
        ("Configuraci√≥n de Puertos", check_ports_configuration)
    ]

    for check_name, check_function in checks:
        print(f"\n{'='*20} {check_name} {'='*20}")
        issues = check_function()
        all_issues.extend(issues)

    # Resumen
    print(f"\n{'='*70}")
    print("üìä RESUMEN DEL DIAGN√ìSTICO")
    print(f"{'='*70}")

    if all_issues:
        print(f"\n‚ùå Se encontraron {len(all_issues)} problemas:")
        for i, issue in enumerate(all_issues, 1):
            print(f"   {i}. {issue}")

        print("\nüö® ACCIONES RECOMENDADAS:")
        print("1. Configurar las variables de entorno faltantes")
        print("2. Verificar que los modelos est√©n incluidos en el build")
        print("3. Revisar los logs del despliegue")
        print("4. Probar el health check de la API")
        print("5. Verificar conectividad entre servicios")
    else:
        print("\n‚úÖ No se encontraron problemas cr√≠ticos")
        print("üéâ El sistema parece estar correctamente configurado")

    print(f"\n{'='*70}")

    return len(all_issues) == 0

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)