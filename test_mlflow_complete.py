#!/usr/bin/env python3
"""
Script completo para probar todas las funcionalidades de MLflow
"""
import mlflow
import mlflow.sklearn
import pandas as pd
import numpy as np
from datetime import datetime
import requests
import json

def test_mlflow_basic():
    """Pruebas b√°sicas de MLflow"""
    print("üî¨ PRUEBAS B√ÅSICAS DE MLFLOW")
    print("=" * 50)

    # Verificar conexi√≥n
    try:
        client = mlflow.MlflowClient()
        print("‚úÖ Conexi√≥n a MLflow establecida")

        # Listar experimentos
        experiments = client.search_experiments()
        print(f"‚úÖ Experimentos encontrados: {len(experiments)}")

        for exp in experiments:
            print(f"   - {exp.name} (ID: {exp.experiment_id})")

        return True
    except Exception as e:
        print(f"‚ùå Error conectando a MLflow: {e}")
        return False

def test_mlflow_experiments():
    """Probar funcionalidades de experimentos"""
    print("\nüìä PRUEBAS DE EXPERIMENTOS")
    print("=" * 50)

    try:
        # Crear un experimento de prueba
        exp_name = f"Test_Experiment_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        exp_id = mlflow.create_experiment(exp_name)

        print(f"‚úÖ Experimento creado: {exp_name} (ID: {exp_id})")

        # Iniciar un run
        with mlflow.start_run(experiment_id=exp_id):
            # Log de par√°metros
            mlflow.log_param("learning_rate", 0.01)
            mlflow.log_param("epochs", 100)
            mlflow.log_param("batch_size", 32)

            # Log de m√©tricas
            for i in range(10):
                mlflow.log_metric("accuracy", 0.8 + i * 0.02, step=i)
                mlflow.log_metric("loss", 0.5 - i * 0.05, step=i)

            # Log de artefactos
            test_data = pd.DataFrame({
                'feature1': np.random.randn(100),
                'feature2': np.random.randn(100),
                'target': np.random.randint(0, 2, 100)
            })
            test_data.to_csv("test_artifact.csv", index=False)
            mlflow.log_artifact("test_artifact.csv")

        print("‚úÖ Run completado exitosamente")
        return True

    except Exception as e:
        print(f"‚ùå Error en experimentos: {e}")
        return False

def test_mlflow_models():
    """Probar funcionalidades de modelos"""
    print("\nü§ñ PRUEBAS DE MODELOS")
    print("=" * 50)

    try:
        # Buscar el experimento principal
        exp = mlflow.get_experiment("108607450594143967")
        if exp:
            print(f"‚úÖ Experimento encontrado: {exp.name}")

            # Obtener runs
            runs = mlflow.search_runs(experiment_ids=[exp.experiment_id])

            for _, run in runs.iterrows():
                print(f"\nüìã Run: {run['tags.mlflow.runName']}")
                print(f"   Status: {run.status}")
                print(f"   Accuracy: {run.get('metrics.accuracy', 'N/A')}")
                print(f"   Model: {run.get('params.model_type', 'N/A')}")

                # Verificar si hay artefactos
                run_id = run.run_id
                client = mlflow.MlflowClient()
                artifacts = client.list_artifacts(run_id)
                print(f"   Artefactos: {len(artifacts)}")

                for artifact in artifacts:
                    print(f"     - {artifact.path}")

        return True

    except Exception as e:
        print(f"‚ùå Error en modelos: {e}")
        return False

def test_mlflow_ui():
    """Probar acceso a la interfaz web"""
    print("\nüåê PRUEBA DE INTERFAZ WEB")
    print("=" * 50)

    try:
        # Verificar si MLflow UI est√° accesible
        response = requests.get("http://localhost:5001", timeout=5)

        if response.status_code == 200:
            print("‚úÖ MLflow UI accesible en http://localhost:5000")
            print("‚úÖ Estado del servidor: OK")

            # Verificar endpoints espec√≠ficos
            endpoints = ["/experiments", "/metrics", "/models"]
            for endpoint in endpoints:
                try:
                    resp = requests.get(f"http://localhost:5001{endpoint}", timeout=2)
                    print(f"   ‚úÖ {endpoint}: {resp.status_code}")
                except:
                    print(f"   ‚ö†Ô∏è {endpoint}: No accesible")

            return True
        else:
            print(f"‚ùå MLflow UI no accesible: {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå Error accediendo a MLflow UI: {e}")
        return False

def test_mlflow_integration():
    """Probar integraci√≥n con el sistema de predicci√≥n"""
    print("\nüîó PRUEBA DE INTEGRACI√ìN")
    print("=" * 50)

    try:
        # Probar carga de modelo desde MLflow
        # Buscar un modelo registrado v√°lido
        client = mlflow.MlflowClient()
        try:
            # Buscar modelos registrados
            registered_models = client.search_registered_models()
            if registered_models:
                latest_model = registered_models[0]
                model_uri = f"models:/{latest_model.name}/latest"
                print(f"‚úÖ Usando modelo registrado: {latest_model.name}")
            else:
                # Fallback a un run espec√≠fico si no hay modelos registrados
                model_uri = "mlruns/108607450594143967/2b0bc40a5809462582fe4827a85d0567/artifacts/model"
                print("‚ö†Ô∏è Usando modelo de run espec√≠fico (puede no existir)")
        except:
            model_uri = "mlruns/108607450594143967/2b0bc40a5809462582fe4827a85d0567/artifacts/model"
            print("‚ö†Ô∏è Usando modelo de run espec√≠fico (puede no existir)")

        try:
            model = mlflow.pyfunc.load_model(model_uri)
            print("‚úÖ Modelo cargado desde MLflow correctamente")

            # Hacer una predicci√≥n de prueba
            test_data = pd.DataFrame([{
                'edad': 45,
                'sexo': 0,  # M
                'imc': 28.5,
                'tas': 135,
                'tad': 85,
                'perimetro_abdominal': 95,
                'frecuencia_cardiaca': 75,
                'realiza_ejercicio': 1,  # Si
                'consume_alcohol': 1,  # Ocasional
                'fuma': 0,  # No
                'medicamentos_hta': 1,  # Si
                'historia_familiar_dm': 1,  # Si
                'diabetes_gestacional': 0,  # No
                'puntaje_findrisc': 12,
                'riesgo_cardiovascular': 0.4
            }])

            prediction = model.predict(test_data)
            print(f"‚úÖ Predicci√≥n de prueba: {prediction[0]:.2f} mg/dL")

        except Exception as e:
            print(f"‚ö†Ô∏è Error cargando modelo desde MLflow: {e}")
            print("   (Esto es normal si el modelo no est√° registrado como pyfunc)")

        return True

    except Exception as e:
        print(f"‚ùå Error en integraci√≥n: {e}")
        return False

def main():
    print("üè• PRUEBAS COMPLETAS DE MLFLOW")
    print("==============================")

    tests = [
        ("Conexi√≥n b√°sica", test_mlflow_basic),
        ("Funcionalidades de experimentos", test_mlflow_experiments),
        ("Gesti√≥n de modelos", test_mlflow_models),
        ("Interfaz web", test_mlflow_ui),
        ("Integraci√≥n con sistema", test_mlflow_integration)
    ]

    results = []
    for test_name, test_func in tests:
        print(f"\nüîç Ejecutando: {test_name}")
        success = test_func()
        results.append((test_name, success))

    # Resumen
    print("\nüìä RESUMEN DE PRUEBAS")
    print("=" * 50)

    successful = sum(1 for _, success in results if success)
    total = len(results)

    print(f"‚úÖ Pruebas exitosas: {successful}/{total}")

    for test_name, success in results:
        status = "‚úÖ" if success else "‚ùå"
        print(f"   {status} {test_name}")

    print("\nüåê ACCESO A MLFLOW:")
    print("   üìä UI Web: http://localhost:5001")
    print("   üìà Experimentos: http://localhost:5001/#/experiments")
    print("   ü§ñ Modelos: http://localhost:5001/#/models")
    print("   üìã Runs: http://localhost:5001/#/runs")

    if successful == total:
        print("\nüéâ ¬°MLflow est√° completamente funcional!")
    else:
        print("\n‚ö†Ô∏è Algunas funcionalidades pueden necesitar atenci√≥n")
        print("   Consulta los logs anteriores para detalles")

if __name__ == "__main__":
    main()